<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_283014_analytics.plus_analytics</name>
        <script><![CDATA[angular.module('sn.$sp')
    .factory('plusAnalyticsService', function($rootScope, $log, $injector, $window, $http) {
		var analyticsProvider;	
		var config = {};
        var isInitialized = false;
	
	
        return {
            setProvider: setProvider,
			init: init,
			
			//interface for implementing analytics services
			startTrackPage: startTrackPage,
            stopTrackPage: stopTrackPage,
            trackEvent: trackEvent,
            trackSearch: trackSearch
        };
		function init(){
			if (isInitialized) {
                return;
            }
			getConfig().then(function(conf){
				config = conf;
				config.userId=window.NOW.user_id_hashed || window.NOW.user_id;
				setProvider(config.provider);
				analyticsProvider.init(config);
				registerHandlers();
				isInitialized=true;
			});
		}
		function getConfig() {
			return $http.get('/api/x_283014_analytics/analytics/config').then(function(response) {
                return response.data.result;
            });
        }
		function registerHandlers() {
            $rootScope.$on('$locationChangeSuccess', function(event, newUrl, oldUrl) {
                startTrackPage(oldUrl, newUrl);
            });
            $rootScope.$on('sp.page.loaded', function(event, newUrl, oldUrl, newState, oldState) {
                var page = event.targetScope.page;
                stopTrackPage(page.title);
            });
            $rootScope.$on('$sp.sc_cat_item.submitted', function(event, data) {
                var item = event.targetScope.data.sc_cat_item;
                trackEvent('Form', 'Submit Catalog Item', item.name);
            });
            $rootScope.$on('$sp.sc_order_guide.submitted', function(event, data) {
                var count = event.targetScope.includedItemsCounter;
				var item = event.targetScope.data.sc_cat_item;
                trackEvent('Form', 'Submit Order Guide', item.name, count);
            });
            
        }
		function setProvider(name){
			analyticsProvider=$injector.get('plus_analytics.'+name);
		}
        function trackSearch(term, resultCount, searchType) {
            analyticsProvider.trackSearch(term, resultCount, searchType);
        }

        function trackEvent(category, action, name, value) {
            name = name ? name : '';
            value = value ? value : '';
			analyticsProvider.trackEvent(category, action, name, value);
        }

        function startTrackPage(referrer, newUrl) {
			analyticsProvider.startTrackPage(referrer, newUrl);
        }

        function stopTrackPage(title) {
			analyticsProvider.stopTrackPage(title);
        }

    })
    /*.service('tracker', function($rootScope, $http, $window, $log, plusAnalyticsService) {
        this.config = {};
        this.isInitialized = false;

        this.init = function() {
            if (this.isInitialized) {
                return;
            }
            var _paq = window._paq = window._paq || [];
            _paq.push(['setUserId', window.NOW.user_id_hashed || window.NOW.user_id]);
            getConfig()
                .then(function(config) {
                    this.config = config;
					plusAnalyticsService.setStrategy(config.provider);
					plusAnalyticsService.init();
                    _paq.push(['setTrackerUrl', this.config.trackerUrl + '/matomo.php']);
                    _paq.push(['setSiteId', this.config.siteId + '']);
					_paq.push(['enableHeartBeatTimer']);
                    var d = document,
                        g = d.createElement('script'),
                        s = d.getElementsByTagName('script')[0];
                    g.type = 'text/javascript';
                    g.async = true;
                    g.src = this.config.trackerUrl + '/matomo.js';
                    s.parentNode.insertBefore(g, s);
                    this.isInitialized = true;
                });
        };

        function getConfig() {
            return $http.get('/api/283014/matomo/config').then(function(response) {
                return response.data.result;
            });
        }

        this.registerHandlers = function() {
            $rootScope.$on('$locationChangeSuccess', function(event, newUrl, oldUrl) {
                plusAnalyticsService.startTrackPage(oldUrl, newUrl);
            });
            $rootScope.$on('sp.page.loaded', function(event, newUrl, oldUrl, newState, oldState) {
                var page = event.targetScope.page;
                plusAnalyticsService.stopTrackPage(page.title);
            });
            $rootScope.$on('$sp.sc_cat_item.submitted', function(event, data) {
                var item = event.targetScope.data.sc_cat_item;
                plusAnalyticsService.trackEvent('Form', 'Submit Catalog Item', item.name);
            });
            $rootScope.$on('$sp.sc_order_guide.submitted', function(event, data) {
                var count = event.targetScope.includedItemsCounter;
				var item = event.targetScope.data.sc_cat_item;
                plusAnalyticsService.trackEvent('Form', 'Submit Order Guide', item.name, count);
            });
            
        };
    })*/
    .directive('plusAnalyticsOn', function($rootScope, plusAnalyticsService) {

        function link($scope, element, attrs) {
            var domElement = element[0];
            var eventType = attrs.plusAnalyticsOn || 'click';
            var name = attrs.plusAnalyticsEventname;
            if (!name) {
                //eventname is mandatory attribute. If it is not there, return.
                return;
            }
            angular.element(domElement).on(eventType + '.analyticson', handleEvent);

            $scope.$on('$destroy', function() {
                angular.element(domElement).off(eventType + '.analyticson');
            });

            function handleEvent(event) {

                var eventName = '[' + event.type + '] ' + name;
                var trackingData = {};
                trackingData.eventType = event.type;

                if (attrs.plusAnalyticsIf) {
                    if (!$scope.$eval(attrs.plusAnalyticsIf)) {
                        return; // Cancel this event if we don't pass the lego-analytics-if condition
                    }
                }

                // Allow components to pass through an expression that gets merged on to the event properties
                // eg. lego-analytics-properties='myComponentScope.someConfigExpression.$analyticsProperties'
                if (attrs.plusAnalyticsProperties) {
                    angular.extend(trackingData, $scope.$eval(attrs.plusAnalyticsProperties));
                }

                plusAnalyticsService.trackEvent(eventName, trackingData);


            }
        }

        return {
            restrict: 'A',
            link: link
        };
    })
    .run(function($log, plusAnalyticsService) {
        try {
            plusAnalyticsService.init();
            //tracker.registerHandlers();
        } catch (ex) {
            $log.log('ERROR setting up analytics+: ' + ex);
        }

    });]]></script>
        <script_name>plus_analytics</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-01 05:59:19</sys_created_on>
        <sys_id>87dff04edb123010e5f77a6139961978</sys_id>
        <sys_mod_count>20</sys_mod_count>
        <sys_name>x_283014_analytics.plus_analytics</sys_name>
        <sys_package display_value="Analytics+" source="x_283014_analytics">b341a7312f1130100eef97eef699b612</sys_package>
        <sys_policy/>
        <sys_scope display_value="Analytics+">b341a7312f1130100eef97eef699b612</sys_scope>
        <sys_update_name>sys_ui_script_87dff04edb123010e5f77a6139961978</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-02 08:31:46</sys_updated_on>
        <ui_type>1</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
